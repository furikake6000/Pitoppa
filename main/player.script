local max_speed_x = 200
local accel_x = 5000
local jumppow = 500
local gravity = 300

function init(self)
	msg.post(".", "acquire_input_focus")
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	local accel_pow = vmath.vector3()

	local velocity = go.get("#collisionobject", "linear_velocity")
	print(velocity)
	
	-- x movement
	if self.movestate_x == hash("left") then
		accel_pow.x = accel_pow.x - accel_x
	elseif self.movestate_x == hash("right") then
		accel_pow.x = accel_pow.x + accel_x
	else
		-- no input
	end
	self.movestate_x = nil -- reset the state

	-- x speed limitation
	if velocity.x >= max_speed_x and accel_pow.x >= 0 then
		accel_pow.x = (max_speed_x - velocity.x) / dt
	elseif velocity.x <= -max_speed_x and accel_pow.x <= 0 then
		accel_pow.x = (-max_speed_x - velocity.x) / dt
	end

	-- jump
	if self.jumpflag == true then
		accel_pow.yã€€= accel_pow.y + jumppow / dt
	end
	self.jumpflag = false -- reset the flag
	
	-- gravity
	accel_pow.y = accel_pow.y - gravity
	
	-- apply velocity
	local f = accel_pow * go.get("#collisionobject", "mass")
	msg.post("#collisionobject", "apply_force", {force = f, position = go.get_world_position()})
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("jump") and action.pressed then
		self.jumpflag = true
	elseif action_id == hash("left") or action_id == hash("right") then
		self.movestate_x = action_id
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
